//@version=4
strategy("MACD Please 4", overlay=true, calc_on_every_tick=false, initial_capital=1000, default_qty_value=100, default_qty_type=strategy.cash, currency=currency.USD)

// days to test
daysBackMax = 60 // input(defval=60, title="Max Days Back to Test", minval=0)
daysBackMin = 0
msBackMax = 1000 * 60 * 60 * 24 * daysBackMax
msBackMin = 1000 * 60 * 60 * 24 * daysBackMin
isWithinTimeBounds = (msBackMax == 0 or (time > (timenow - msBackMax))) and (msBackMin == 0 or (time < (timenow - msBackMin)))

longStopPerc = input(15, title='Long Stop %', type=input.float, step=1) / 100
longStopPrice = strategy.position_avg_price * (1 - longStopPerc)
shortStopPerc = input(15, title='Short Stop %', type=input.float, step=1) / 100
shortStopPrice = strategy.position_avg_price * (1 + shortStopPerc)

hiLowFast = input(defval=30, title="Hi Low Short", minval=0, step=1)
hiLowSlow = input(defval=220, title="Hi Low Long", minval=0, step=1) // 160

closeLongInShortZone = input(defval=54, title="Close Long In Short Zone RSI", minval=0, step=1)
maxAdds = 3 // input(defval=3, title="Max Adds", minval=0, step=1)
allowShorts = input(defval=false, title="Allow shorts?", type=input.bool) // true
fastMacdBottoms = input(defval=false, title="Fast MACD Bottoms?", type=input.bool) // true
// lowestMacdBottoms = input(defval=true, title="Lowest MACD Bottoms?", type=input.bool)
macdLength = 50 // input(defval=50, title="MACD Bars", minval=0, step=10)

var isLong = false
var isShort = false
var shortZone = false
var longZone = false
var lowSlowCount = 0
var highSlowCount = 0
var lowFastCount = 0
var highFastCount = 0
var longCount = 0
var shortCount = 0
var lastMacd = 0.0
var lastRsi = 0.0

// MACD
fast = 12, slow = 26
fastMA = ema(close, fast)
slowMA = ema(close, slow)
macd = fastMA - slowMA
signal = ema(macd, 9)
rsiClose = rsi(close, 14)

getMACD(index) =>
    thisFastMA = ema(close[index], fast)
    thisSlowMA = ema(close[index], slow)
    thisMacd = thisFastMA - thisSlowMA

getRsi(index) =>
    thisRsi = rsi(close[index], 14)

getHighest(index, speed) =>
    thisHighest = highest(high, speed)[index]

getLowest(index, speed) =>
    thisLowest = lowest(low, speed)[index]

macd0 = getMACD(0)
macd1 = getMACD(1)
macd2 = getMACD(2)
macd3 = getMACD(3)

rsi0 = getRsi(0)
rsi1 = getRsi(1)
rsi2 = getRsi(2)
rsi3 = getRsi(3)
rsi4 = getRsi(4)

highestFast1 = getHighest(1, hiLowFast)
highestFast2 = getHighest(2, hiLowFast)
highestFast3 = getHighest(3, hiLowFast)
lowestFast1 = getLowest(1, hiLowFast)
lowestFast2 = getLowest(2, hiLowFast)
lowestFast3 = getLowest(3, hiLowFast)
highestSlow1 = getHighest(1, hiLowSlow)
highestSlow2 = getHighest(2, hiLowSlow)
highestSlow3 = getHighest(3, hiLowSlow)
lowestSlow1 = getLowest(1, hiLowSlow)
lowestSlow2 = getLowest(2, hiLowSlow)
lowestSlow3 = getLowest(3, hiLowSlow)

plot(vwap, color=color.blue)
plot(series=highestFast1, color=color.green, linewidth=1)
plot(series=lowestFast1, color=color.red, linewidth=1)
plot(series=highestSlow1, color=color.green, linewidth=2)
plot(series=lowestSlow1, color=color.red, linewidth=2)

oneSlowLow = low < lowestSlow1
oneSlowHigh = high > highestSlow1
oneFastLow = longZone and low < lowestFast1
oneFastHigh = shortZone and high > highestFast1

if oneSlowLow
    lowSlowCount := lowSlowCount + 1

if oneSlowHigh
    highSlowCount := highSlowCount + 1

if oneFastLow
    lowFastCount := lowFastCount + 1

if oneFastHigh
    highFastCount := highFastCount + 1

if oneSlowLow
    shortZone := true
    longZone := false
    highSlowCount := 0
    lowSlowCount := 0
    highFastCount := 0
    lowFastCount := 0

if oneSlowHigh
    longZone := true
    shortZone := false
    lowSlowCount := 0
    highSlowCount := 0
    highFastCount := 0
    lowFastCount := 0

// plotit = (lowSlowCount == 1 and lowFastCount > 5) or (highSlowCount == 1 and highFastCount > 5)
// plotshape(plotit, title="Stop", text="Stop", style=shape.labeldown, location=location.abovebar, size=size.tiny, color=color.green, textcolor=color.white, transp=0)

highestMacd = highest(macd, macdLength)[1]
highestMacd2 = highest(macd, macdLength)[2]
highestMacd3 = highest(macd, macdLength)[3]
highestMacd4 = highest(macd, macdLength)[4]
lowestMacd = lowest(macd, macdLength)[1]
lowestMacd2 = lowest(macd, macdLength)[2]
lowestMacd3 = lowest(macd, macdLength)[3]
lowestMacd4 = lowest(macd, macdLength)[4]
higherMacd = macd > highestMacd and macd > 0
higherMacd2 = macd1 > highestMacd2 and macd1 > 0
higherMacd3 = macd2 > highestMacd3 and macd2 > 0
higherMacd4 = macd3 > highestMacd4 and macd3 > 0
lowerMacd = macd < lowestMacd and macd < 0
lowerMacd2 = macd1 < lowestMacd2 and macd1 < 0
lowerMacd3 = macd2 < lowestMacd3 and macd2 < 0
lowerMacd4 = macd3 < lowestMacd4 and macd3 < 0
bgcolor(color=higherMacd ? color.green : lowerMacd ? color.red : na, transp=90)

macdBottomed = macd < signal and ((macd2 - macd1 > macd1 - macd) or (macd > macd1 and macd1 < macd2)) and macd < 0
macdTopped = macd > signal and macd < macd1 and (macd - signal < macd1 - signal[1]) and macd > 0
rsiBottomed = rsiClose > rsi1 and (rsi1 < rsi2 or rsi1 < rsi3)
rsiTopped = rsiClose < rsi1 and (rsi1 > rsi2 or rsi1 > rsi3)
rsiDecreasing = rsiClose < rsi2
rsiIncreasing = rsiClose > rsi2

// long = not isLong and longZone and ((macdBottomed))
long = not isLong and ((not allowShorts) or longZone) and ((low[1] < lowestFast2 and low > lowestFast1) or (fastMacdBottoms and macdBottomed) or (not allowShorts and lowerMacd2 and macd > lowestMacd))
short = allowShorts and not isShort and shortZone and (macdTopped and (rsiClose > 55 or rsi1 > 55)) //  or (low[1] < lowestSlow2 and low < lowestSlow1 and rsiClose > 25))
addShort = allowShorts and isShort and high[1] > highestFast2 and high < highestFast1 and (macd > lastMacd or rsiClose > lastRsi)
addLong = isLong and ((longZone and low[1] < lowestFast2 and low > lowestFast1) or (shortZone and lowerMacd2 and macd > lowestMacd)) and (macd < lastMacd or rsiClose < lastRsi)
closeLong = isLong and ((rsiTopped and rsiDecreasing and (rsiClose > 70 or rsi1 > 68)) or (shortZone and rsiTopped and rsi1 > closeLongInShortZone)) // and macdBottomed 
closeShort = allowShorts and isShort and ((rsiBottomed and rsiIncreasing and (rsiClose < 38 or rsi1 < 32)) or longZone)


bgColor2 = shortZone ? color.red : longZone ? color.green : na
bgcolor(color=bgColor2, transp=85)

if long
    isLong := true
    isShort := false

if short and allowShorts
    isShort := true
    isLong := false

if closeLong
    isLong := false
    longCount := 0
    lastMacd := 0.0
    lastRsi := 0.0
    
if closeShort and allowShorts
    isShort := false
    shortCount := 0
    lastMacd := 0.0
    lastRsi := 0.0

if addLong
    longCount := longCount + 1
    lastMacd := macd < lastMacd ? macd : lastMacd
    lastRsi := rsiClose < lastRsi ? rsiClose : lastRsi

if addShort and allowShorts
    shortCount := shortCount + 1
    lastMacd := macd > lastMacd ? macd : lastMacd
    lastRsi := rsiClose > lastRsi ? rsiClose : lastRsi

strategy.entry("long", long=true, when=long and isWithinTimeBounds)
strategy.order("long", long=true, when=addLong and longCount <= maxAdds and isWithinTimeBounds, comment="add")
strategy.close("long", when=(closeLong or short) and isWithinTimeBounds)
strategy.entry("short", long=false, when=allowShorts and short and isWithinTimeBounds)
strategy.order("short", long=false, when=allowShorts and addShort and shortCount <= maxAdds and isWithinTimeBounds, comment="add")
strategy.close("short", when=allowShorts and (closeShort or long) and isWithinTimeBounds)

if (strategy.position_size > 0)
    if close <= longStopPrice
        isLong := false
        longCount := 0
        lastMacd := 0.0
        lastRsi := 0.0
    strategy.exit("exit long", "long", stop=longStopPrice)

if (strategy.position_size < 0)
    if close >= shortStopPrice and allowShorts
        isShort := false
        shortCount := 0
        lastMacd := 0.0
        lastRsi := 0.0
    strategy.exit("exit short", "short", stop=shortStopPrice)