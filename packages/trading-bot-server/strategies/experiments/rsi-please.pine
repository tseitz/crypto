//@version=4
strategy("RSI Please!", overlay=true, calc_on_every_tick=true, initial_capital=1000, default_qty_value=100, default_qty_type=strategy.cash, currency=currency.USD)

// days to test
daysBackMax = input(defval=60, title="Max Days Back to Test", minval=0)
daysBackMin = input(defval=0, title="Min Days Back to Test", minval=0)
msBackMax = 1000 * 60 * 60 * 24 * daysBackMax
msBackMin = 1000 * 60 * 60 * 24 * daysBackMin
isWithinTimeBounds = (msBackMax == 0 or (time > (timenow - msBackMax))) and (msBackMin == 0 or (time < (timenow - msBackMin)))

hiLowSlow = input(defval=75, title="Hi Low Long", minval=0, step=1)

longTakeProfPerc = input(2, title='Long Take Profit %', type=input.float, step=0.1) / 100
longTakeProfPrice = strategy.position_avg_price * (1 + longTakeProfPerc)
longStopPerc = input(10, title='Long Stop %', type=input.float, step=1) / 100
longStopPrice = strategy.position_avg_price * (1 - longStopPerc)

shortTakeProfPerc = input(2, title='Short Take Profit %', type=input.float, step=0.1) / 100
shortTakeProfPrice = strategy.position_avg_price * (1 - shortTakeProfPerc)
shortStopPerc = input(10, title='Short Stop %', type=input.float, step=1) / 100
shortStopPrice = strategy.position_avg_price * (1 + shortStopPerc)

macdLength = input(defval=50, title="MACD Bars", minval=0, step=10)

var isLong = false
var isShort = false
var shortZone = false
var longZone = false
var firstOpen = false
var lowSlowCount = 0
var highSlowCount = 0
var lowFastCount = 0
var highFastCount = 0
var longCount = 0
var shortCount = 0

// MACD
fast = 12, slow = 26
fastMA = ema(close, fast)
slowMA = ema(close, slow)
macd = fastMA - slowMA
signal = ema(macd, 9)
rsiClose = rsi(close, 14)

wma = wma(close, 66)
plot(series=wma, color=color.blue, linewidth=1)

getMACD(index) =>
    thisFastMA = ema(close[index], fast)
    thisSlowMA = ema(close[index], slow)
    thisMacd = thisFastMA - thisSlowMA

getRsi(index) =>
    thisRsi = rsi(close[index], 14)

getHighest(index, speed) =>
    thisHighest = highest(high, speed)[index]

getLowest(index, speed) =>
    thisLowest = lowest(low, speed)[index]

getSize(index) =>
    thisSize = high[index] - low[index]

macd0 = getMACD(0)
macd1 = getMACD(1)
macd2 = getMACD(2)
macd3 = getMACD(3)
macd4 = getMACD(4)

rsi0 = getRsi(0)
rsi1 = getRsi(1)
rsi2 = getRsi(2)
rsi3 = getRsi(3)
rsi4 = getRsi(4)

size0 = getSize(0)
size1 = getSize(1)
size2 = getSize(2)
size3 = getSize(3)
size4 = getSize(4)

greenCandle = (close > open)
redCandle = (close < open)

plotit = size0 > size1 + size2 + size3 // and abs(open - close) > abs(open[1] - close[1])
superplotit = size0 > size1 + size2 + size3 + size4
longGreen = plotit and greenCandle
longRed = plotit and redCandle
plotshape(plotit, title="SIZE!", text="SIZE!", style=shape.labeldown, location=location.abovebar, size=size.tiny, color=color.green, textcolor=color.white, transp=0)
plotshape(superplotit, title="SUPER SIZE!", text="SUPER SIZE!", style=shape.labeldown, location=location.abovebar, size=size.tiny, color=color.red, textcolor=color.white, transp=0)

highestSlow1 = getHighest(1, hiLowSlow)
highestSlow2 = getHighest(2, hiLowSlow)
highestSlow3 = getHighest(3, hiLowSlow)
lowestSlow1 = getLowest(1, hiLowSlow)
lowestSlow2 = getLowest(2, hiLowSlow)
lowestSlow3 = getLowest(3, hiLowSlow)

highestMacd = highest(macd, macdLength)[1]
highestMacd2 = highest(macd, macdLength)[2]
highestMacd3 = highest(macd, macdLength)[3]
highestMacd4 = highest(macd, macdLength)[4]
lowestMacd = lowest(macd, macdLength)[1]
lowestMacd2 = lowest(macd, macdLength)[2]
lowestMacd3 = lowest(macd, macdLength)[3]
lowestMacd4 = lowest(macd, macdLength)[4]
higherMacd = macd > highestMacd and macd > 0
higherMacd2 = macd1 > highestMacd2 and macd1 > 0
higherMacd3 = macd2 > highestMacd3 and macd2 > 0
higherMacd4 = macd3 > highestMacd4 and macd3 > 0
lowerMacd = macd < lowestMacd and macd < 0
lowerMacd2 = macd1 < lowestMacd2 and macd1 < 0
lowerMacd3 = macd2 < lowestMacd3 and macd2 < 0
lowerMacd4 = macd3 < lowestMacd4 and macd3 < 0
bgcolor(color=higherMacd ? color.green : lowerMacd ? color.red : na, transp=90)

// plot(vwap, color=color.blue)

oneSlowLow = low < lowestSlow1
oneSlowHigh = high > highestSlow1


if oneSlowLow and not shortZone
    shortZone := true
    longZone := false
    firstOpen := true

if oneSlowHigh and not longZone
    longZone := true
    shortZone := false
    firstOpen := true


// plotit = (lowSlowCount == 1 and lowFastCount > 5) or (highSlowCount == 1 and highFastCount > 5)
// plotshape(plotit, title="Stop", text="Stop", style=shape.labeldown, location=location.abovebar, size=size.tiny, color=color.green, textcolor=color.white, transp=0)

macdBottomed = macd > macd1 and macd1 <= macd2
macdTopped = macd < macd1 and macd1 >= macd2
macdIncreasing = macd > macd2
macdDecreasing = macd < macd2
rsiBottomed = rsiClose > rsi1 and rsi1 <= rsi2
rsiTopped = rsiClose < rsi1 and rsi1 >= rsi2
rsiDecreasing = rsiClose < rsi2
rsiIncreasing = rsiClose > rsi2

firstShort = shortZone and firstOpen and barstate.isnew
firstLong = longZone and firstOpen and barstate.isnew
long = longZone and ((lowerMacd2 and macd > lowestMacd and barstate.isnew) or (rsiBottomed and rsi1 < 33 and not lowerMacd) or (longGreen and not higherMacd) or (not isLong and crossover(macd, signal) and barstate.isnew))
short = shortZone and ((higherMacd2 and macd < highestMacd and barstate.isnew) or (rsiTopped and rsi1 > 67 and not higherMacd) or (longRed and not lowerMacd) or (not isShort and oneSlowLow and not lowerMacd))
addLong = isLong and long
addShort = isShort and short
closeLong = isLong and ((higherMacd2 and macd < highestMacd and barstate.isnew) or (rsi1 < rsi2 and rsi2 >= rsi3 and not higherMacd and rsi2 > 70 and barstate.isnew) or (longRed))
closeShort = isShort and ((lowerMacd2 and macd > lowestMacd and low[1] > lowestSlow2 and barstate.isnew) or (rsi1 > rsi2 and rsi2 <= rsi3 and not lowerMacd and rsi2 < 30 and barstate.isnew)  or (longGreen))


bgColor2 = shortZone ? color.red : longZone ? color.green : na
bgcolor(color=bgColor2, transp=85)

plot(series=highestSlow1, color=color.green, linewidth=2)
plot(series=lowestSlow1, color=color.red, linewidth=2)

if firstLong or long
    isLong := true
    isShort := false

if firstShort or short
    isShort := true
    isLong := false

if closeLong
    isLong := false

if closeShort
    isShort := false

if (firstShort or firstLong) and firstOpen
    firstOpen := false


strategy.entry("long", long=true, when=(firstLong or long) and isWithinTimeBounds)
strategy.order("long", long=true, when=addLong and isWithinTimeBounds, comment="add")
strategy.close("long", when=(closeLong or firstShort) and isWithinTimeBounds)
strategy.entry("short", long=false, when=(firstShort or short) and isWithinTimeBounds)
strategy.order("short", long=false, when=addShort and isWithinTimeBounds, comment="add")
strategy.close("short", when=(closeShort or firstLong) and isWithinTimeBounds)

// if (strategy.position_size > 0)
//     exitLong = high >= longTakeProfPrice or low <= longStopPrice
//     if exitLong
//         isLong := false
//     // strategy.exit("exit long", "long", limit=longTakeProfPrice, stop=longStopPrice)

// if (strategy.position_size < 0)
//     exitShort = low <= shortTakeProfPrice or high >= shortStopPrice
//     if exitShort
//         isShort := false
