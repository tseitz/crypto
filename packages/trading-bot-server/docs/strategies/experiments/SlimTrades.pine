//@version=4
strategy("SlimTrades", overlay=true, calc_on_every_tick=false, initial_capital=1000, default_qty_value=100, default_qty_type=strategy.cash, currency=currency.USD)

// days to test
daysBackMax = input(defval=21, title="Max Days Back to Test", minval=0)
daysBackMin = 0
msBackMax = 1000 * 60 * 60 * 24 * daysBackMax
msBackMin = 1000 * 60 * 60 * 24 * daysBackMin
isWithinTimeBounds = (msBackMax == 0 or (time > (timenow - msBackMax))) and (msBackMin == 0 or (time < (timenow - msBackMin)))

showSlow = input(defval=true, title="Show Slow?", type=input.bool)

longStopPerc = input(35, title='Long Stop %', type=input.float, step=1) / 100
longStopPrice = strategy.position_avg_price * (1 - longStopPerc)
shortStopPerc = 20 // input(12, title='Short Stop %', type=input.float, step=1) / 100
shortStopPrice = strategy.position_avg_price * (1 + shortStopPerc)

hiLowFast = input(defval=70, title="Hi Low Short", minval=0, step=5)
hiLowSlow = input(defval=720, title="Hi Low Long", minval=0, step=25)

// loneCloseLong = input(defval=80, title="Lone Close Long", minval=0, step=1)
macdCloseLong = input(defval=80, title="Highest MACD Close Long", minval=0, step=1)
closeLongInShortZone = input(defval=75, title="Close Long In Short Zone RSI", minval=0, step=1)
longZoneRsi = input(defval=33, title="Buy Long Zone RSI", minval=0, step=1)
shortZoneRsi = input(defval=34, title="Buy Short Zone RSI", minval=0, step=1)
macdLength = input(defval=30, title="MACD Bars", minval=0, step=5)
// maxAdds = input(defval=50, title="Max Adds", minval=0, step=1)
addOnLows = input(defval=true, title="Add On Lows?", type=input.bool)
reopenOnHighs = input(defval=true, title="Reopen on new highs?", type=input.bool)
allowShorts = false // input(defval=false, title="Allow shorts?", type=input.bool)

var isLong = false
var isShort = false
var shortZone = false
var longZone = false
var firstAction = false
var lowSlowCount = 0
var highSlowCount = 0
var lowFastCount = 0
var highFastCount = 0
var longCount = 0
var shortCount = 0
var entryPrice = 0.0
var lastMacd = 0.0
var lastRsi = 0.0

// MACD
fast = 12, slow = 26
fastMA = ema(close, fast)
slowMA = ema(close, slow)
macd = fastMA - slowMA
signal = ema(macd, 9)
rsiClose = rsi(close, 14)

getMACD(index) =>
    thisFastMA = ema(close[index], fast)
    thisSlowMA = ema(close[index], slow)
    thisMacd = thisFastMA - thisSlowMA

getRsi(index) =>
    thisRsi = rsi(close[index], 14)

getHighest(index, speed) =>
    thisHighest = highest(high, speed)[index]

getLowest(index, speed) =>
    thisLowest = lowest(low, speed)[index]

macd0 = getMACD(0)
macd1 = getMACD(1)
macd2 = getMACD(2)
macd3 = getMACD(3)

rsi0 = getRsi(0)
rsi1 = getRsi(1)
rsi2 = getRsi(2)
rsi3 = getRsi(3)
rsi4 = getRsi(4)

highestFast0 = getHighest(0, hiLowFast)
highestFast1 = getHighest(1, hiLowFast)
highestFast2 = getHighest(2, hiLowFast)
highestFast3 = getHighest(3, hiLowFast)
lowestFast0 = getLowest(0, hiLowFast)
lowestFast1 = getLowest(1, hiLowFast)
lowestFast2 = getLowest(2, hiLowFast)
lowestFast3 = getLowest(3, hiLowFast)
highestSlow1 = getHighest(1, hiLowSlow)
highestSlow2 = getHighest(2, hiLowSlow)
highestSlow3 = getHighest(3, hiLowSlow)
lowestSlow1 = getLowest(1, hiLowSlow)
lowestSlow2 = getLowest(2, hiLowSlow)
lowestSlow3 = getLowest(3, hiLowSlow)

plot(series=highestFast1, color=color.green, linewidth=1)
plot(series=lowestFast1, color=color.red, linewidth=1)
plot(series=showSlow ? highestSlow1 : na, color=color.green, linewidth=3)
plot(series=showSlow ? lowestSlow1 : na, color=color.red, linewidth=3)

// lowestSlow2 because I want to make sure it's not coming up to meet it. it needs to be a true low
oneSlowLow = low < lowestSlow1 and low < lowestSlow2
oneSlowHigh = high > highestSlow1 and high > highestSlow2
twoSlowLows = low[1] < lowestSlow2 and oneSlowLow
twoSlowHighs = high[1] > highestSlow2 and oneSlowHigh
oneFastLow = longZone and low < lowestFast2
oneFastHigh = shortZone and high > highestFast2

if oneSlowLow
    lowSlowCount := lowSlowCount + 1

if oneSlowHigh
    highSlowCount := highSlowCount + 1

if oneFastLow
    lowFastCount := lowFastCount + 1

if oneFastHigh
    highFastCount := highFastCount + 1

if twoSlowLows
    firstAction := longZone or firstAction
    shortZone := true
    longZone := false
    highSlowCount := 0
    lowSlowCount := 0
    highFastCount := 0
    lowFastCount := 0

if twoSlowHighs
    firstAction := shortZone or firstAction
    longZone := true
    shortZone := false
    lowSlowCount := 0
    highSlowCount := 0
    highFastCount := 0
    lowFastCount := 0

bgColor2 = shortZone ? color.red : longZone ? color.green : na
bgcolor(color=bgColor2, transp=85)

highestMacd = highest(macd, macdLength)[1]
highestMacd2 = highest(macd, macdLength)[2]
highestMacd3 = highest(macd, macdLength)[3]
highestMacd4 = highest(macd, macdLength)[4]
lowestMacd = lowest(macd, macdLength)[1]
lowestMacd2 = lowest(macd, macdLength)[2]
lowestMacd3 = lowest(macd, macdLength)[3]
lowestMacd4 = lowest(macd, macdLength)[4]
higherMacd = macd > highestMacd and macd > 0
higherMacd2 = macd1 > highestMacd2 and macd1 > 0
higherMacd3 = macd2 > highestMacd3 and macd2 > 0
higherMacd4 = macd3 > highestMacd4 and macd3 > 0
lowerMacd = macd < lowestMacd and macd < 0
lowerMacd2 = macd1 < lowestMacd2 and macd1 < 0
lowerMacd3 = macd2 < lowestMacd3 and macd2 < 0
lowerMacd4 = macd3 < lowestMacd4 and macd3 < 0
bgcolor(color=higherMacd ? color.green : lowerMacd ? color.red : na, transp=90)

possibleMacdBottom = macd < signal and ((macd2 - macd1 > macd1 - macd) or (macd > macd1 and macd1 < macd2)) and ((longZone and (macd3 - macd2 > macd2 - macd1) or (macd1 > macd2 and macd2 < macd3)) or macd < 0)
macdBottomed = macd > macd1 and macd1 < macd2 and macd < signal and macd1 < 0
macdTopped = macd > signal and ((macd2 - macd1 < macd1 - macd) or (macd < macd1 and macd1 > macd2)) and macd > 0
rsiBottomed = rsiClose > rsi1 and (rsi1 < rsi2 or rsi1 < rsi3)
rsiTopped = rsiClose < rsi1 and (rsi1 > rsi2 or rsi1 > rsi3)
rsiDecreasing = rsiClose < rsi2
rsiIncreasing = (rsiClose > rsi2 and rsi1 < rsi2) // or (rsiClose > rsi3 and rsi1 > rsi2 and rsi3 > rsi2)
newLow = low < lowestFast1 and high > lowestFast0
newHigh = high > highestFast1 and low < highestFast0
twoNewHighs = high[2] > highestFast3 and newHigh
twoNewLows = low[2] < lowestFast3 and newLow
lowestPrevMacd = lowerMacd2 and macd > lowestMacd
highestPrevMacd = higherMacd2 and macd < highestMacd
// possibleBreakdown = low[2] < lowestFast3 and low[1] < lowestFast2 and low < lowestFast1

shortAllowed = allowShorts and not isShort and shortZone
shorting = allowShorts and isShort and shortZone
addLows = addOnLows and newLow
addLow = (addOnLows and newLow and not lowerMacd and possibleMacdBottom)

buyLongZoneSetup = longZone and ((newLow) or (rsiBottomed and lowerMacd2) or (reopenOnHighs and high > highestSlow2))
buyShortZoneSetup = shortZone and rsiBottomed and rsiIncreasing and lowerMacd2 and lowerMacd and possibleMacdBottom
addBuyLongZoneSetup = longZone and (addLow or (rsiBottomed and rsiIncreasing and ((lowerMacd or lowerMacd2) or (rsi1 < longZoneRsi))))
addBuyShortZoneSetup = shortZone and rsiBottomed and rsiIncreasing and ((lowerMacd2 and lowerMacd and possibleMacdBottom) or (rsi1 < shortZoneRsi))
// closeLoneCloseSetup = rsi1 > loneCloseLong and not higherMacd2
closeSetup = rsi1 > macdCloseLong
closeLongInShortZoneSetup = (shortZone and rsiTopped and rsiDecreasing and rsi1 > closeLongInShortZone) // or (shortZone and highestPrevMacd)
stopped = (isShort and high >= shortStopPrice) or (isLong and low <= longStopPrice)

long = not isLong and (buyLongZoneSetup or buyShortZoneSetup)
addLong = isLong and (addBuyLongZoneSetup or addBuyShortZoneSetup)
closeLong = isLong and ((rsiTopped and rsiDecreasing and closeSetup) or closeLongInShortZoneSetup or stopped)
short = shortAllowed and closeLong
addShort = shorting and ((rsiTopped and ((higherMacd2 and higherMacd))))
closeShort = shorting and long

// bgcolor(color=twoNewLows ? color.blue : na, transp=20)

if long
    isLong := true
    isShort := false
    entryPrice := open

if short and allowShorts
    isShort := true
    isLong := false
    entryPrice := open

if closeLong
    isLong := false
    longCount := 0
    shortCount := 0
    lastMacd := 0.0
    lastRsi := 0.0
    entryPrice := 0.0
    
if closeShort and allowShorts
    isShort := false
    longCount := 0
    shortCount := 0
    lastMacd := 0.0
    lastRsi := 0.0
    entryPrice := 0.0

if addLong
    longCount := longCount + 1
    lastMacd := macd < lastMacd ? macd : lastMacd
    lastRsi := rsiClose < lastRsi ? rsiClose : lastRsi

if addShort and allowShorts
    shortCount := shortCount + 1
    lastMacd := macd > lastMacd ? macd : lastMacd
    lastRsi := rsiClose > lastRsi ? rsiClose : lastRsi

plotshape(firstAction and longZone and long, title="buybags", style=shape.cross, location=location.abovebar, size=size.tiny, color=color.green, textcolor=color.white, transp=0)
plotshape(firstAction and shortZone and closeLong, title="sellbags", style=shape.xcross, location=location.abovebar, size=size.tiny, color=color.red, textcolor=color.white, transp=0)

if firstAction and shortZone and closeLong
    firstAction := false

if firstAction and longZone and long
    firstAction := false

strategy.entry("long", long=true, when=long and isWithinTimeBounds)
strategy.order("long", long=true, when=addLong and isWithinTimeBounds, comment="add")
strategy.close("long", when=closeLong and isWithinTimeBounds)
strategy.entry("short", long=false, when=short and isWithinTimeBounds)
strategy.order("short", long=false, when=addShort and isWithinTimeBounds, comment="add")
strategy.close("short", when=closeShort and isWithinTimeBounds)